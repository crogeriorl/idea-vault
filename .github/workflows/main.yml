name: Containerized application CI workflow

on:
  push:
    branches:
      - master
      - main
      - release
      - develop
  pull_request:
    branches:
      - master
      - main
      - release
      - develop
  workflow_dispatch: # Allows manual triggering

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Grant write permission for packages (GHCR)

    steps:
      - name: Checkout code repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }} # Use the secret you created

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}  # Image name format for GHCR

      - name: Build and push Docker image
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository }}:$(echo ${{ github.sha }} | cut -c1-7)
        uses: docker/build-push-action@v5
        with:
          context: ./my-app/ # Path to your Dockerfile and build context
          push: true
          tags: $IMAGE_NAME    # ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploying.. Decodificar chave privada
        env:
          SSH_PRIVATE_KEY: ${{ secrets.OCI_WEB1_SSH_KEY }}
          IMAGE_TAG: $(echo ${{ github.sha }} | cut -c1-7)
        run: |
          mkdir -p ~/.ssh
          echo -e "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Adicionar chave ao agente SSH
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      # - name: 'Make site code package'
      #   run: |
      #     cd ./my-app
      #     zip -r ~/code.zip . -x .git/** .github/** .git*
      - name: 'Deploy container to server'
        run: |
          scp -o StrictHostKeyChecking=no -v -i ~/.ssh/id_rsa -P 22 ./my-app/deploy_run_docker.sh \
            opc@${{ vars.OCI_WEB1_PUB_IP }}:${{ vars.APPSRV_DIR }}    # use "scp ... -r <directory> to recursive copy
          # ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no opc@${{ vars.OCI_WEB1_PUB_IP }} \
          #   "unzip -o ${{ vars.APPSRV_DIR }}/code.zip -d ${{ vars.APPSRV_DIR }}"
          # ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no opc@${{ vars.OCI_WEB1_PUB_IP }} \
          #   "rm -rf ${{ vars.APPSRV_DIR }}/*.zip"
#          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no opc@${{ vars.OCI_WEB1_PUB_IP }} \
#             "cd ${{ vars.APPSRV_DIR }}; chmod +x ./deploy_run_docker.sh; \
#                sudo ./deploy_run_docker.sh ${{ secrets.GHCR_TOKEN }} $IMAGE_NAME"
#          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no opc@${{ vars.OCI_WEB1_PUB_IP }} \
#            "rm -rf ~/.ssh/id_rsa"
